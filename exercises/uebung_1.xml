<root>
    <exercise>Übung 1</exercise>
    <task type="text">
        <title>1.1 World Wide Web</title>
        <question>
            <subtitle>Mit welchen fachlichen Argumenten wurde das WWW-Proposal von Tim Burners Lee abgelehnt?</subtitle>
            <solution>Das WWW Proposal wurde als vage bezeichnet. Das wurde aber mit der Evolvierbarkeit verwechselt.</solution>
        </question>
        <question>
            <subtitle>Was sind die fachlichen Argumente, warum das WWW dennoch ein Erfolg wurde?</subtitle>
            <solution>Das WWW wurde erfolgreich, da es die Möglichkeit bietet, verschiedene Technologien unabhängig voneinander zu entwickeln</solution>
        </question>
        <question>
            <subtitle>Was wäre der Preis für die garantierte Verhinderung von "broken links"?</subtitle>
            <solution>Einführung der referenziellen Integrität und regelmäßige Überwachung zur Sicherstellung der Link-Qualität sind erforderlich.</solution>
        </question>
    </task>

    <task type="text">
        <title>1.2 HTTP</title>
        <question>
            <subtitle>Sie bekommen im Browser den HTTP Status Code 200. Was bedeutet das?</subtitle>
            <solution>HTTP Status Code 200 -> OK. Die Request wurde erfolgreich verarbeitet</solution>
        </question>
        <question>
            <subtitle>Sie bekommen im Browser den HTTP Status Code 301. Was hat das zu bedeuten?</subtitle>
            <solution>Der Zielressource wurde eine neue, permanente URL zugewiesen die für zukünftige Anfragen genutzt werden soll.</solution>
        </question>
        <question>
            <subtitle>Sie bekommen im Browser den HTTP Status Code 400. Was hat das zu bedeuten? Was können Sie dagegen tun?</subtitle>
            <solution>Die Request des Clients ist fehlerhaft</solution>
        </question>
        <question>
            <subtitle>Sie bekommen im Browser den HTTP Status Code 403. Was hat das zu bedeuten? Was können Sie dagegen tun?</subtitle>
            <solution>Client ist nicht authorisiert für diesen Zugriff</solution>
        </question>
        <question>
            <subtitle>In einer Webanwendung benötigen Sie eine OPTIONS-Anfrage, die die Optionen des Servers vor dem eigentlichen Zugriff erfragen soll.
                Aus Performancegründen soll die Abfrage aber cacheable sein. Wie könnten Sie dafür eine Lösung angehen?</subtitle>
            <solution>Statt einer OPTIONS Request kann man eine GET Request versenden</solution>
        </question>
    </task>

    <task type="codeblock">
        <title></title>
        <question>
            <subtitle></subtitle>
            <solution></solution>
        </question>
        <question>
            <subtitle></subtitle>
            <solution></solution>
        </question>
        <question>
            <subtitle></subtitle>
            <solution></solution>
        </question>
    </task>
</root>